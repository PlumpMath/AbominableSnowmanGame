from panda3d.core import Vec2
from panda3d.core import TextNode
from direct.gui.OnscreenText import OnscreenText

POS_RIGHT = 1.2
POS_TOP = 1.1

ST_IDLE = 0
ST_PEEK_IN = 1
ST_PEEK_OUT = 2
ST_PEEK_WAIT = 3

class SMGUIElement():
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Constructor
	# SMGUIElement(String name, int maxValue {-1 or 0: disabled ; 1+: will use this max value})
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def __init__(self, name, maxValue):
		self.name = name
		self.value = 0
		self.maxValue = maxValue   # Must be 1 or higher to activate.
		self.life = 0
		self.labelOffset = 0.4
		self.label = OnscreenText(text = self.name, style = 1, fg = (0,0,0,1), pos = (POS_RIGHT - self.labelOffset, POS_TOP + 0.1), align = TextNode.ARight, scale = 0.1)
		txt = str(self.value)
		if(self.maxValue > 0):
			txt += ("/" + str(self.maxValue))
		self.textObj = OnscreenText(text = txt, style = 1, fg = (0,0,0,1), pos = (POS_RIGHT, POS_TOP), align = TextNode.ARight, scale = .2)
		self.state = ST_IDLE
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Adds 1 to the peek life counter.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def addLife(self):
		self.life += 1
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Resets the peek life counter to 0.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def resetLife(self):
		self.life = 0
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Makes this class get a freaking life and stop sitting on its lazy a- Wait, what? Oh, returns the current peek life.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def getLife(self):
		return self.life
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Returns the peek state as an integer.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def getState(self):
		return self.state
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Sets the peek state.
	# setState(int a {0 - 3})
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def setState(self, state):
		self.state = state;
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Gets the value of the tracked variable.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def getValue(self):
		return self.value
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Changes the value of the tracked variable AND peeks the counter out.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def changeValue(self, value):
		self.setValue(value)
		self.setState(ST_PEEK_IN)
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Changes the variable behind the scenes with no peeking.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def setValue(self, value):
		txt = str(value)
		if(self.maxValue > 0):
			txt += ("/" + str(self.maxValue))
		self.textObj.setText(txt)
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Returns the OnScreenText object.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def getTextObj(self):
		return self.textObj
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Gets the vertical position of the text.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def getYPos(self):
		tpos = self.textObj.getPos()
		return tpos[1]
	
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Sets the Y position of both the label and value.
	#------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	def setYPos(self, ypos):
		tpos = self.textObj.getPos()
		self.textObj.setPos(tpos[0], ypos)
		self.label.setPos(tpos[0] - self.labelOffset, ypos)